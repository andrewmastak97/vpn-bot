import os
import asyncio
import logging
from datetime import datetime
from decimal import Decimal
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from database import (
    init_db, add_user, get_user, add_subscription,
    get_active_subscription, save_wireguard_config,
    get_expired_subscriptions, deactivate_subscription,
    extend_subscription
)
from wireguard import create_client_config
from yookassa import Configuration, Payment

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ YooKassa
Configuration.account_id = os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ü–µ–Ω –∏ —Å–∫–∏–¥–æ–∫
PRICE_MONTH = Decimal(os.getenv("PRICE_MONTH", "399"))
DISCOUNT_3_MONTHS = Decimal(os.getenv("DISCOUNT_3_MONTHS", "5"))
DISCOUNT_6_MONTHS = Decimal(os.getenv("DISCOUNT_6_MONTHS", "10"))
DISCOUNT_12_MONTHS = Decimal(os.getenv("DISCOUNT_12_MONTHS", "20"))

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

def calculate_price(months: int) -> Decimal:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏"""
    base_price = PRICE_MONTH * months
    if months >= 12:
        discount = DISCOUNT_12_MONTHS
    elif months >= 6:
        discount = DISCOUNT_6_MONTHS
    elif months >= 3:
        discount = DISCOUNT_3_MONTHS
    else:
        discount = 0
    
    return base_price * (1 - discount / 100)

def get_subscription_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    
    plans = [
        ("1 –º–µ—Å—è—Ü", "buy_1"),
        ("3 –º–µ—Å—è—Ü–∞ (-5%)", "buy_3"),
        ("6 –º–µ—Å—è—Ü–µ–≤ (-10%)", "buy_6"),
        ("12 –º–µ—Å—è—Ü–µ–≤ (-20%)", "buy_12")
    ]
    
    for label, callback_data in plans:
        builder.button(text=label, callback_data=callback_data)
    
    builder.adjust(1)
    return builder.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await get_user(message.from_user.id)
    if not user:
        await add_user(message.from_user.id, message.from_user.username)
        
    active_sub = await get_active_subscription(message.from_user.id)
    
    if not active_sub:
        text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GadgetBar VPN-–±–æ—Ç!\n\n"
            "üéÅ –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 1 –º–µ—Å—è—Ü\n"
            "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤:"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial")
        builder.button(text="üí≥ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="show_plans")
        builder.adjust(1)
        await message.answer(text, reply_markup=builder.as_markup())
    else:
        await show_subscription_status(message.from_user.id)

@dp.callback_query(lambda c: c.data == "trial")
async def process_trial(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥"""
    user_id = callback.from_user.id
    active_sub = await get_active_subscription(user_id)
    
    if active_sub:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    await add_subscription(
        user_id=user_id,
        subscription_type="trial",
        duration_months=1,
        payment_id="trial",
        is_trial=True
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard
    private_key, public_key, config, qr_config = await create_client_config(user_id)
    await save_wireguard_config(user_id, private_key, public_key, config)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    text = (
        "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:"
    )
    
    builder = InlineKeyboardBuilder()
    systems = [
        ("Windows", "config_windows"),
        ("MacOS", "config_macos"),
        ("Linux", "config_linux"),
        ("iOS", "config_ios"),
        ("Android", "config_android")
    ]
    
    for label, callback_data in systems:
        builder.button(text=label, callback_data=f"{callback_data}_{user_id}")
    
    builder.adjust(2)
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "show_plans")
async def show_plans(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã"""
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
    await callback.message.answer(text, reply_markup=get_subscription_keyboard())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("buy_"))
async def process_buy(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    months = int(callback.data.split("_")[1])
    price = calculate_price(months)
    
    payment = Payment.create({
        "amount": {
            "value": str(price),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{(await bot.me()).username}"
        },
        "capture": True,
        "description": f"VPN –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å.",
        "metadata": {
            "user_id": callback.from_user.id,
            "months": months
        }
    })
    
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–û–ø–ª–∞—Ç–∏—Ç—å",
        url=payment.confirmation.confirmation_url
    )
    
    text = (
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} —Ä—É–±.\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    
    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()

async def show_subscription_status(user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub = await get_active_subscription(user_id)
    if not sub:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
    else:
        end_date = datetime.fromisoformat(sub["end_date"])
        text = (
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {'–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥' if sub['is_trial'] else '–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'}"
        )
    
    await bot.send_message(user_id, text)

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
    await show_subscription_status(message.from_user.id)

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    text = "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:"
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_subs")
    builder.button(text="–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_deactivate")
    builder.button(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_extend")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

async def check_expired_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    while True:
        expired = await get_expired_subscriptions()
        for user_id, sub_type in expired:
            await deactivate_subscription(user_id)
            await bot.send_message(
                user_id,
                "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ."
            )
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await init_db()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    asyncio.create_task(check_expired_subscriptions())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 